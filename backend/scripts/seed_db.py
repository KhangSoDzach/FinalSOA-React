"""
Seed the database with initial data for testing
"""
import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from sqlmodel import Session, create_engine, select
from app.core.config import settings
from app.models.user import User, UserRole
from app.models.bill import Bill, BillType, BillStatus
from app.models.service import Service, ServiceCategory, ServiceStatus
from app.models.notification import Notification, NotificationType, NotificationStatus
from app.core.security import get_password_hash
from datetime import datetime, date, time
from decimal import Decimal

# Create engine
engine = create_engine(str(settings.database_url))

def create_users():
    """Create sample users"""
    users = [
        User(
            username="admin",
            email="admin@apartment.com", 
            hashed_password=get_password_hash("admin123"),
            full_name="Qu·∫£n tr·ªã vi√™n",
            role=UserRole.ADMIN,
            is_active=True,
            created_at=datetime.now()
        ),
        User(
            username="manager",
            email="manager@apartment.com",
            hashed_password=get_password_hash("manager123"),
            full_name="Ng∆∞·ªùi qu·∫£n l√Ω",
            role=UserRole.MANAGER,
            is_active=True,
            created_at=datetime.now()
        ),
        User(
            username="user001",
            email="user001@apartment.com",
            hashed_password=get_password_hash("user123"),
            full_name="Nguy·ªÖn VƒÉn A",
            phone="0901234567",
            role=UserRole.USER,
            apartment_number="A101",
            building="A",
            is_active=True,
            created_at=datetime.now()
        ),
        User(
            username="user002",
            email="user002@apartment.com",
            hashed_password=get_password_hash("user123"),
            full_name="Tr·∫ßn Th·ªã B", 
            phone="0901234568",
            role=UserRole.USER,
            apartment_number="B202",
            building="B",
            is_active=True,
            created_at=datetime.now()
        )
    ]
    return users

def create_services():
    """Create sample services"""
    services = [
        Service(
            name="D·ªçn d·∫πp nh√†",
            description="D·ªãch v·ª• d·ªçn d·∫πp chung c∆∞ theo gi·ªù",
            category=ServiceCategory.CLEANING,
            price=Decimal("100000"),
            unit="gi·ªù",
            status=ServiceStatus.ACTIVE,
            available_days="1,2,3,4,5,6,7",  # Monday to Sunday
            available_time_start=time(8, 0),
            available_time_end=time(18, 0),
            advance_booking_hours=24,
            max_booking_days=7,
            provider_name="C√¥ng ty v·ªá sinh ABC",
            provider_contact="0901111111",
            created_at=datetime.now()
        ),
        Service(
            name="S·ª≠a ch·ªØa ƒëi·ªán",
            description="D·ªãch v·ª• s·ª≠a ch·ªØa ƒëi·ªán trong chung c∆∞",
            category=ServiceCategory.REPAIR,
            price=Decimal("200000"),
            unit="l·∫ßn",
            status=ServiceStatus.ACTIVE,
            available_days="1,2,3,4,5",  # Monday to Friday
            available_time_start=time(8, 0),
            available_time_end=time(17, 0),
            advance_booking_hours=48,
            max_booking_days=14,
            provider_name="Th·ª£ ƒëi·ªán XYZ",
            provider_contact="0902222222",
            created_at=datetime.now()
        ),
        Service(
            name="ƒê·∫∑t ph√≤ng h·ªôi th·∫£o",
            description="ƒê·∫∑t ph√≤ng h·ªôi th·∫£o trong t√≤a nh√†",
            category=ServiceCategory.ROOM_BOOKING,
            price=Decimal("500000"),
            unit="ng√†y",
            status=ServiceStatus.ACTIVE,
            available_days="1,2,3,4,5,6,7",
            available_time_start=time(6, 0),
            available_time_end=time(22, 0),
            advance_booking_hours=72,
            max_booking_days=30,
            provider_name="Ban qu·∫£n l√Ω t√≤a nh√†",
            provider_contact="0903333333",
            created_at=datetime.now()
        )
    ]
    return services

def create_bills(users):
    """Create sample bills"""
    bills = [
        Bill(
            bill_number="HD202401001",
            user_id=users[2].id,  # user001
            bill_type=BillType.MANAGEMENT_FEE,
            title="Ph√≠ qu·∫£n l√Ω th√°ng 1/2024",
            description="Ph√≠ qu·∫£n l√Ω chung c∆∞ cho cƒÉn h·ªô A101",
            amount=Decimal("2000000"),
            due_date=datetime(2024, 2, 15),
            status=BillStatus.PENDING,
            created_at=datetime.now()
        ),
        Bill(
            bill_number="HD202401002",
            user_id=users[3].id,  # user002
            bill_type=BillType.UTILITY,
            title="Ti·ªÅn ƒëi·ªán n∆∞·ªõc th√°ng 1/2024",
            description="Ti·ªÅn ƒëi·ªán n∆∞·ªõc cho cƒÉn h·ªô B202",
            amount=Decimal("1500000"),
            due_date=datetime(2024, 2, 20),
            status=BillStatus.PENDING,
            created_at=datetime.now()
        ),
        Bill(
            bill_number="HD202401003",
            user_id=users[2].id,  # user001
            bill_type=BillType.PARKING,
            title="Ph√≠ g·ª≠i xe th√°ng 1/2024",
            description="Ph√≠ g·ª≠i xe √¥ t√¥ v√† xe m√°y",
            amount=Decimal("800000"),
            due_date=datetime(2024, 2, 10),
            status=BillStatus.PAID,
            created_at=datetime.now(),
            paid_at=datetime(2024, 1, 25)
        )
    ]
    return bills

def create_notifications(users):
    """Create sample notifications"""
    notifications = [
        Notification(
            title="Th√¥ng b√°o b·∫£o tr√¨ thang m√°y",
            content="Thang m√°y t√≤a A s·∫Ω ƒë∆∞·ª£c b·∫£o tr√¨ v√†o ng√†y 15/02/2024 t·ª´ 8:00 ƒë·∫øn 17:00. Vui l√≤ng s·ª≠ d·ª•ng c·∫ßu thang b·ªô.",
            type=NotificationType.MAINTENANCE,
            priority=2,
            target_audience="building_A",
            status=NotificationStatus.SENT,
            scheduled_at=datetime(2024, 2, 10, 8, 0),
            sent_at=datetime(2024, 2, 10, 8, 0),
            push_notification=True,
            sms=False,
            email=True,
            requires_response=False,
            created_by=users[1].id,  # manager
            created_at=datetime.now()
        ),
        Notification(
            title="Nh·∫Øc nh·ªü thanh to√°n h√≥a ƒë∆°n",
            content="K√≠nh g·ª≠i c∆∞ d√¢n, h√≥a ƒë∆°n ph√≠ qu·∫£n l√Ω th√°ng 1/2024 s·∫Ω ƒë·∫øn h·∫°n thanh to√°n v√†o ng√†y 15/02/2024.",
            type=NotificationType.BILL_REMINDER,
            priority=1,
            target_audience="all",
            status=NotificationStatus.SENT,
            scheduled_at=datetime(2024, 2, 5, 9, 0),
            sent_at=datetime(2024, 2, 5, 9, 0),
            push_notification=True,
            sms=True,
            email=True,
            requires_response=False,
            created_by=users[0].id,  # admin
            created_at=datetime.now()
        ),
        Notification(
            title="S·ª± ki·ªán T·∫øt Nguy√™n ƒê√°n 2024",
            content="Chung c∆∞ t·ªï ch·ª©c ti·ªác T·∫øt Nguy√™n ƒê√°n v√†o ng√†y 10/02/2024 t·∫°i s·∫£nh t·∫ßng 1. M·ªùi c√°c gia ƒë√¨nh tham gia.",
            type=NotificationType.EVENT,
            priority=1,
            target_audience="all",
            status=NotificationStatus.SCHEDULED,
            scheduled_at=datetime(2024, 2, 1, 10, 0),
            push_notification=True,
            sms=False,
            email=True,
            event_date=datetime(2024, 2, 10, 18, 0),
            event_location="S·∫£nh t·∫ßng 1",
            requires_response=True,
            created_by=users[1].id,  # manager
            created_at=datetime.now()
        )
    ]
    return notifications

def main():
    print("üå± Seeding database with initial data...")
    
    with Session(engine) as session:
        # Create users
        print("üë• Creating users...")
        users = create_users()
        for user in users:
            session.add(user)
        session.commit()
        session.refresh(users[0])
        session.refresh(users[1])
        session.refresh(users[2])
        session.refresh(users[3])
        print(f"‚úÖ Created {len(users)} users")

        # Create services
        print("üîß Creating services...")
        services = create_services()
        for service in services:
            session.add(service)
        session.commit()
        print(f"‚úÖ Created {len(services)} services")

        # Create bills
        print("üí≥ Creating bills...")
        bills = create_bills(users)
        for bill in bills:
            session.add(bill)
        session.commit()
        print(f"‚úÖ Created {len(bills)} bills")

        # Create notifications
        print("üì¢ Creating notifications...")
        notifications = create_notifications(users)
        for notification in notifications:
            session.add(notification)
        session.commit()
        print(f"‚úÖ Created {len(notifications)} notifications")

    print("\nüéâ Database seeding completed!")
    print("\nTest accounts:")
    print("Admin: admin / admin123")
    print("Manager: manager / manager123") 
    print("User 1: user001 / user123 (CƒÉn h·ªô A101)")
    print("User 2: user002 / user123 (CƒÉn h·ªô B202)")

if __name__ == "__main__":
    main()